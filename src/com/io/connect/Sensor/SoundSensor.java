/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.io.connect.Sensor;
 

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;



public class SoundSensor extends javax.swing.JFrame {
    
        
    public SoundSensor() {
        initComponents();
        JTextArea txt = this.txtTexto;
        this.setTitle("LOG SOUND SENSOR");
        final String SENSOR = "SOUND";
        Thread task = new Thread() {
            @Override
            public void run() {
                System.out.println("******LOG PRESENCE SENSOR********");
                while (true) {
                    try {
                        String msgBack = SocketConectorSensor.getSocketConector().getInputData().readUTF();
                        String myMsg[] = msgBack.split(":");

                        if (myMsg[0].equals("DESKTOP") && myMsg[1].equals("SOUND")) {
                            switch (myMsg[2]) {
                                case "ON":
                                    System.out.println("-----ON----");
                                    System.out.println(msgBack);
                                    txt.append(msgBack + "\n");
                                    SocketConectorSensor.getSocketConector().sendMessage(MessageResponse.SOUND_ON);
                                    break;
                                case "OFF":
                                    System.out.println("----OFF----");
                                    System.out.println(msgBack );
                                    txt.append(msgBack + "\n");
                                    SocketConectorSensor.getSocketConector().sendMessage(MessageResponse.SOUND_OFF);
                                    break;
                                case "ANALIZAR":
                                    System.out.println("----ANALIZAR----");
                                    txt.append(msgBack + "\n");
                                    SocketConectorSensor.getSocketConector().sendStatus("DESKTOP_" + SENSOR + "_" +  String.valueOf(getRandomIntegerBetweenRange(0,2)));
                                    break;
                                default:
                                    System.out.println("LISTENING");
                                    
                            }
                        }
                        if(myMsg[0].equals("MOVIL") && myMsg[1].equals("SOUND")){
                            switch (myMsg[2]) {
                                case "ON":
                                    System.out.println("-----ON----");
                                    System.out.println(msgBack);
                                    txt.append(msgBack + "\n");
                                    SocketConectorSensor.getSocketConector().sendMessage(MessageResponse.MOVIL_SOUND_ON);
                                    break;
                                case "OFF":
                                    System.out.println("----OFF----");
                                    System.out.println(msgBack );
                                    txt.append(msgBack + "\n");
                                    SocketConectorSensor.getSocketConector().sendMessage(MessageResponse.MOVIL_SOUND_OFF);
                                    break;
                                case "ANALIZAR":
                                    System.out.println("----ANALIZAR----");
                                    txt.append(msgBack + "\n");
                                    SocketConectorSensor.getSocketConector().sendStatus("MOVIL_" + SENSOR + "_" +  String.valueOf(getRandomIntegerBetweenRange(0,2)));
                                    break;
                                default:
                                    System.out.println("LISTENING");
                                    
                            }
                        }
                        
                    } catch (IOException ex) {
                        Logger.getLogger(SoundSensor.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        };
        task.start();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtTexto = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FRM2");

        txtTexto.setColumns(20);
        txtTexto.setRows(5);
        jScrollPane1.setViewportView(txtTexto);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

 
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SoundSensor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SoundSensor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SoundSensor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SoundSensor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SoundSensor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtTexto;
    // End of variables declaration//GEN-END:variables
 
    
   
      
    public static int getRandomIntegerBetweenRange(int min, int max){
        int x = (int)(Math.random()*((max-min)+1))+min;
        return x;
    }  
      
      
    
}
